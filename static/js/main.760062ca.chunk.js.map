{"version":3,"sources":["reportWebVitals.js","faculty_scraper.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FacultySearchBox","props","state","url","loading","handleChange","bind","handleSubmit","event","this","setState","target","value","urlString","String","replace","validateUrl","document","getElementById","setCustomValidity","preventDefault","console","log","requestOptions","method","mode","headers","body","JSON","stringify","fetch","response","ok","json","Error","data","catch","error","endsWith","test","startsWith","className","onSubmit","autoFocus","type","id","onChange","placeholder","React","Component","ReactDOM","render","StrictMode"],"mappings":"qNAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,0DCoFCQ,E,kDArFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAK,GACLC,SAAS,GAGb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARL,E,yDAWNE,GACTC,KAAKC,SAAS,CAAEP,IAAKK,EAAMG,OAAOC,QAClC,IAAIC,EAAYC,OAAON,EAAMG,OAAOC,OAAOG,QAAQ,MAAO,IACtDN,KAAKO,YAAYH,GACjBI,SAASC,eAAe,SAASC,kBAAkB,gHAGvDF,SAASC,eAAe,SAASC,kBAAkB,M,mCAG1CX,GAAQ,IAAD,OAIhB,GAHAA,EAAMY,kBAGFX,KAAKP,MAAME,QAAf,CAIA,IAAIS,EAAYC,OAAOL,KAAKP,MAAMC,KAAKY,QAAQ,MAAO,IACtD,GAAIN,KAAKO,YAAYH,GACjBQ,QAAQC,IAAI,oBADhB,CAIAb,KAAKC,SAAS,CAACN,SAAS,IAGxB,IAAMmB,EAAiB,CACnBC,OAAQ,OACRC,KAAM,OACNC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAE1B,IAAKU,KAGhCiB,MAAM,+CAAgDP,GACjD7B,MAAK,SAAAqC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,oBAEvBxC,MAAK,SAAAyC,GACF,EAAKzB,SAAS,CAAEN,SAAS,EAAOD,IAAK,KAGrCkB,QAAQC,IAAIa,MAEfC,OAAM,SAACC,GACJ,EAAK3B,SAAS,CAAEN,SAAS,IACzBa,SAASC,eAAe,SAASC,kBAAkB,yF,kCAInDN,GACR,OAAQA,EAAUyB,SAAS,UAAY,mBAAmBC,KAAK1B,KACzDA,EAAU2B,WAAW,iBAAmB3B,EAAU2B,WAAW,kB,+BAInE,MAAO,CACH,oBAAIC,UAAU,QAAd,6BACA,sBAAMC,SAAUjC,KAAKF,aAAckC,UAAU,OAA7C,SACI,wBAAOA,UAAU,SAAjB,UACI,uBAAOE,WAAS,EAACC,KAAK,OAAOC,GAAG,QAAQjC,MAAOH,KAAKP,MAAMC,IAAK2C,SAAUrC,KAAKJ,aAAc0C,YAAY,yDAAyDN,UAAU,cAC3K,wBAAQG,KAAK,SAASH,UAAU,eAAhC,SAEQhC,KAAKP,MAAME,QAAU,cAAC,IAAD,IAAW,cAAC,IAAD,gB,GA7E7B4C,IAAMC,WCCrCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAM1B3B,M","file":"static/js/main.760062ca.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './faculty_scraper.css';\nimport { FaSearch } from 'react-icons/fa';\nimport { Puff } from '@agney/react-loading';\n\nclass FacultySearchBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: '',\n            loading: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ url: event.target.value });\n        var urlString = String(event.target.value).replace(/\\/$/, \"\")\n        if (this.validateUrl(urlString)) {\n            document.getElementById(\"input\").setCustomValidity(\"Invalid URL: Make sure you are providing a valid university URL (starts with http(s):// and ends with .edu).\");\n            return;\n        }\n        document.getElementById(\"input\").setCustomValidity(\"\");\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // Do nothing if already loading something.\n        if (this.state.loading)\n            return;\n\n        // Want to accept only URls that end in .edu ignoring trailing /s.\n        var urlString = String(this.state.url).replace(/\\/$/, \"\")\n        if (this.validateUrl(urlString)) {\n            console.log(\"Invalid URL.\");\n            return;\n        }\n        this.setState({loading: true});\n\n        // Send request to flask with the URL.\n        const requestOptions = {\n            method: 'POST',\n            mode: \"cors\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ url: urlString })\n        };\n\n        fetch('https://facultyscraper-heroku.herokuapp.com/', requestOptions)\n            .then(response => {\n                if (response.ok)\n                    return response.json();\n                else\n                    throw new Error(\"Bad response!\");\n            })\n            .then(data => {\n                this.setState({ loading: false, url: \"\" });\n\n                // TODO: Add in display of results.\n                console.log(data);\n            })\n            .catch((error) => {\n                this.setState({ loading: false });\n                document.getElementById(\"input\").setCustomValidity(\"Invalid URL! Try another variation of this URL and make sure it is accessible!\");\n            });\n    }\n\n    validateUrl(urlString) {\n        return !urlString.endsWith('.edu') || !/^[a-zA-Z:\\/\\.]+$/.test(urlString) ||\n            (!urlString.startsWith('http://www.') && !urlString.startsWith('https://www.'));\n    }\n\n    render() {\n        return [\n            <h1 className=\"title\">Faculty Scraper</h1>,\n            <form onSubmit={this.handleSubmit} className=\"wrap\">\n                <label className=\"scrape\">\n                    <input autoFocus type=\"text\" id=\"input\" value={this.state.url} onChange={this.handleChange} placeholder=\"Input a university URL (e.g. https://www.illinois.edu)\" className=\"scrapeBar\" />\n                    <button type=\"submit\" className=\"scrapeButton\">\n                        {\n                            this.state.loading ? <Puff /> : <FaSearch />\n                        }\n                    </button>\n                </label>\n            </form>\n        ];\n    }\n}\n\nexport default FacultySearchBox;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport FacultySearchBox from './faculty_scraper.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FacultySearchBox />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}